{"ast":null,"code":"import _classCallCheck from \"/Users/wentai/work space/wis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wentai/work space/wis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Crypto = require(\"crypto-js\");\n\nvar Signature = /*#__PURE__*/function () {\n  function Signature() {\n    _classCallCheck(this, Signature);\n  }\n\n  _createClass(Signature, null, [{\n    key: \"getSignature\",\n    value: function getSignature(config, date, policyBase64) {\n      var getSignatureKey = function getSignatureKey(key, dateStamp, regionName) {\n        var kDate = Crypto.HmacSHA256(dateStamp, \"AWS4\" + key);\n        var kRegion = Crypto.HmacSHA256(regionName, kDate);\n        var kService = Crypto.HmacSHA256(\"s3\", kRegion);\n        var kSigning = Crypto.HmacSHA256(\"aws4_request\", kService);\n        return kSigning;\n      };\n\n      var signature = function signature(policyEncoded) {\n        return Crypto.HmacSHA256(policyEncoded, getSignatureKey(config.secretAccessKey, date, config.region)).toString(Crypto.enc.Hex);\n      };\n\n      return signature(policyBase64);\n    }\n  }]);\n\n  return Signature;\n}();\n\nexport { Signature as default };","map":{"version":3,"sources":["/Users/wentai/work space/wis/node_modules/react-s3/lib/Signature.js"],"names":["Crypto","require","Signature","config","date","policyBase64","getSignatureKey","key","dateStamp","regionName","kDate","HmacSHA256","kRegion","kService","kSigning","signature","policyEncoded","secretAccessKey","region","toString","enc","Hex"],"mappings":";;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;IAEqBC,S;;;;;;;iCACGC,M,EAAQC,I,EAAMC,Y,EAAc;AAC5C,UAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAAgC;AACpD,YAAMC,KAAK,GAAGV,MAAM,CAACW,UAAP,CAAkBH,SAAlB,EAA6B,SAASD,GAAtC,CAAd;AACA,YAAMK,OAAO,GAAGZ,MAAM,CAACW,UAAP,CAAkBF,UAAlB,EAA8BC,KAA9B,CAAhB;AACA,YAAMG,QAAQ,GAAGb,MAAM,CAACW,UAAP,CAAkB,IAAlB,EAAwBC,OAAxB,CAAjB;AACA,YAAME,QAAQ,GAAGd,MAAM,CAACW,UAAP,CAAkB,cAAlB,EAAkCE,QAAlC,CAAjB;AACA,eAAOC,QAAP;AACH,OAND;;AAOA,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,aAAa,EAAI;AAC/B,eAAOhB,MAAM,CAACW,UAAP,CAAkBK,aAAlB,EAAiCV,eAAe,CAACH,MAAM,CAACc,eAAR,EAAyBb,IAAzB,EAA+BD,MAAM,CAACe,MAAtC,CAAhD,EAA+FC,QAA/F,CAAwGnB,MAAM,CAACoB,GAAP,CAAWC,GAAnH,CAAP;AACH,OAFD;;AAGA,aAAON,SAAS,CAACV,YAAD,CAAhB;AACH;;;;;;SAbgBH,S","sourcesContent":["const Crypto = require(\"crypto-js\");\n\nexport default class Signature {\n    static getSignature(config, date, policyBase64) {\n        const getSignatureKey = (key, dateStamp, regionName) => {\n            const kDate = Crypto.HmacSHA256(dateStamp, \"AWS4\" + key);\n            const kRegion = Crypto.HmacSHA256(regionName, kDate);\n            const kService = Crypto.HmacSHA256(\"s3\", kRegion);\n            const kSigning = Crypto.HmacSHA256(\"aws4_request\", kService);\n            return kSigning;\n        };\n        const signature = policyEncoded => {\n            return Crypto.HmacSHA256(policyEncoded, getSignatureKey(config.secretAccessKey, date, config.region)).toString(Crypto.enc.Hex);\n        };\n        return signature(policyBase64);\n    }\n}"]},"metadata":{},"sourceType":"module"}