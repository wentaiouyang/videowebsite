{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wentai/work space/wis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wentai/work space/wis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wentai/work space/wis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wentai/work space/wis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Signature from \"./Signature\";\nimport Policy from \"./Policy\";\nimport { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nimport { throwError } from './ErrorThrower';\n\nvar S3FileUpload = /*#__PURE__*/function () {\n  function S3FileUpload() {\n    _classCallCheck(this, S3FileUpload);\n  }\n\n  _createClass(S3FileUpload, null, [{\n    key: \"uploadFile\",\n    value: function () {\n      var _uploadFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, config) {\n        var fd, key, url, params, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Error Thrower :x:\n                throwError(config, file);\n                fd = new FormData();\n                key = \"\".concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name);\n                url = \"https://\".concat(config.bucketName, \".s3.amazonaws.com/\");\n                fd.append(\"key\", key);\n                fd.append(\"acl\", \"public-read\");\n                fd.append(\"Content-Type\", file.type);\n                fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\n                fd.append(\"x-amz-server-side-encryption\", \"AES256\");\n                fd.append(\"X-Amz-Credential\", \"\".concat(config.accessKeyId, \"/\").concat(dateYMD, \"/\").concat(config.region, \"/s3/aws4_request\"));\n                fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n                fd.append(\"X-Amz-Date\", xAmzDate);\n                fd.append(\"x-amz-meta-tag\", \"\");\n                fd.append(\"Policy\", Policy.getPolicy(config));\n                fd.append(\"X-Amz-Signature\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n                fd.append(\"file\", file);\n                params = {\n                  method: \"post\",\n                  headers: {\n                    fd: fd\n                  },\n                  body: fd\n                };\n                _context.next = 19;\n                return fetch(url, params);\n\n              case 19:\n                data = _context.sent;\n\n                if (data.ok) {\n                  _context.next = 22;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.reject(data));\n\n              case 22:\n                return _context.abrupt(\"return\", Promise.resolve({\n                  bucket: config.bucketName,\n                  key: \"\".concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name),\n                  location: \"\".concat(url).concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name),\n                  result: data\n                }));\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function uploadFile(_x, _x2) {\n        return _uploadFile.apply(this, arguments);\n      }\n\n      return uploadFile;\n    }()\n  }, {\n    key: \"deleteFile\",\n    value: function () {\n      var _deleteFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fileName, config) {\n        var fd, url, params, deleteResult;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fd = new FormData();\n                url = \"https://\".concat(config.bucketName, \".s3-\").concat(config.region, \".amazonaws.com/\").concat(config.dirName ? config.dirName + \"/\" : \"\").concat(fileName);\n                fd.append(\"Date\", xAmzDate);\n                fd.append(\"X-Amz-Date\", xAmzDate);\n                fd.append(\"Authorization\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n                fd.append(\"Content-Type\", \"text/plain\");\n                params = {\n                  method: \"delete\",\n                  headers: {\n                    fd: fd\n                  }\n                };\n                _context2.next = 9;\n                return fetch(url, params);\n\n              case 9:\n                deleteResult = _context2.sent;\n\n                if (deleteResult.ok) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.reject(deleteResult));\n\n              case 12:\n                return _context2.abrupt(\"return\", Promise.resolve({\n                  ok: deleteResult.ok,\n                  status: deleteResult.status,\n                  message: \"File Deleted\",\n                  fileName: fileName\n                }));\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function deleteFile(_x3, _x4) {\n        return _deleteFile.apply(this, arguments);\n      }\n\n      return deleteFile;\n    }()\n  }]);\n\n  return S3FileUpload;\n}();\n\nvar uploadFile = S3FileUpload.uploadFile,\n    deleteFile = S3FileUpload.deleteFile;\nexport { uploadFile, deleteFile };\nexport default S3FileUpload;","map":{"version":3,"sources":["/Users/wentai/work space/wis/node_modules/react-s3/lib/ReactS3.js"],"names":["Signature","Policy","dateISOString","xAmzDate","dateYMD","throwError","S3FileUpload","file","config","fd","FormData","key","dirName","name","url","bucketName","append","type","accessKeyId","region","getPolicy","getSignature","params","method","headers","body","fetch","data","ok","Promise","reject","resolve","bucket","location","result","fileName","deleteResult","status","message","uploadFile","deleteFile"],"mappings":"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","sourcesContent":["import Signature from \"./Signature\";\nimport Policy from \"./Policy\";\nimport { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nimport { throwError } from './ErrorThrower';\n\nclass S3FileUpload {\n    static async uploadFile(file, config) {\n\n        // Error Thrower :x:\n        throwError(config, file);\n\n        const fd = new FormData();\n        const key = `${config.dirName ? config.dirName + \"/\" : \"\"}${file.name}`;\n        const url = `https://${config.bucketName}.s3.amazonaws.com/`;\n        fd.append(\"key\", key);\n        fd.append(\"acl\", \"public-read\");\n        fd.append(\"Content-Type\", file.type);\n        fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\n        fd.append(\"x-amz-server-side-encryption\", \"AES256\");\n        fd.append(\"X-Amz-Credential\", `${config.accessKeyId}/${dateYMD}/${config.region}/s3/aws4_request`);\n        fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n        fd.append(\"X-Amz-Date\", xAmzDate);\n        fd.append(\"x-amz-meta-tag\", \"\");\n        fd.append(\"Policy\", Policy.getPolicy(config));\n        fd.append(\"X-Amz-Signature\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n        fd.append(\"file\", file);\n\n        const params = {\n            method: \"post\",\n            headers: {\n                fd\n            },\n            body: fd\n        };\n\n        const data = await fetch(url, params);\n        if (!data.ok) return Promise.reject(data);\n        return Promise.resolve({\n            bucket: config.bucketName,\n            key: `${config.dirName ? config.dirName + \"/\" : \"\"}${file.name}`,\n            location: `${url}${config.dirName ? config.dirName + \"/\" : \"\"}${file.name}`,\n            result: data\n        });\n    }\n    static async deleteFile(fileName, config) {\n        const fd = new FormData();\n        const url = `https://${config.bucketName}.s3-${config.region}.amazonaws.com/${config.dirName ? config.dirName + \"/\" : \"\"}${fileName}`;\n        fd.append(\"Date\", xAmzDate);\n        fd.append(\"X-Amz-Date\", xAmzDate);\n        fd.append(\"Authorization\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n        fd.append(\"Content-Type\", \"text/plain\");\n\n        const params = {\n            method: \"delete\",\n            headers: {\n                fd\n            }\n        };\n\n        const deleteResult = await fetch(url, params);\n        if (!deleteResult.ok) return Promise.reject(deleteResult);\n        return Promise.resolve({\n            ok: deleteResult.ok,\n            status: deleteResult.status,\n            message: \"File Deleted\",\n            fileName: fileName\n        });\n    }\n}\nconst { uploadFile, deleteFile } = S3FileUpload;\nexport { uploadFile, deleteFile };\nexport default S3FileUpload;"]},"metadata":{},"sourceType":"module"}